openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /order:
    post:
      operationId: OrderController_createOrder
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrderDTo'
      responses:
        '200':
          description: Creats the new Order
          content:
            application/json:
              examples:
                succes: &ref_0
                  description: Gives the order details
                  value:
                    succes: true
                    data:
                      customerName: premchandu
                      tableNumber: 20
                      order_id: 14
                      date:
                        createdDate: '2023-08-24T08:24:49.956Z'
                        updatedDate: '2023-08-24T08:24:49.956Z'
        '400':
          description: Invalid Requests
          content:
            application/json:
              examples:
                succes: *ref_0
                TableNumberNull:
                  description: Given Table is not entered
                  value:
                    message: Table number should be number
                QuantityNull:
                  description: This error occurs when quanitty is null
                  value:
                    message:
                      - quantity should not be empty
                    error: Bad Request
                MenuItemNull:
                  description: This error occurs when quanitty is null
                  value:
                    message:
                      - menuItem should not be empty
                    error: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: &ref_1
        - Orders
      security: &ref_2
        - bearer: []
  /order/{id}:
    get:
      operationId: OrderController_getOrderDetailsById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Gives the orders details by given id
          content:
            application/json:
              examples:
                Success:
                  description: Gives the order details
                  value:
                    succes: true
                    data:
                      order_id: 11
                      customerName: ramanjenulu
                      tableNumber: 0
                      orderStatus: completed
                      paymentStatus: approved
                      orderItems:
                        - orderItem_id: 17
                          quantity: 3000
                          menuitems:
                            menuitem_id: 4
                            menu_itemname: Pancakes
                            price: 10
                            tax: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
        '404':
          description: Order with id not found
          content:
            application/json:
              examples:
                NotFound:
                  description: Gives the order details
                  value:
                    message: Invalid id Order with given id is not available
                    error: Not Found
      tags: *ref_1
      security: *ref_2
  /order/byname/{name}:
    get:
      operationId: OrderController_getOrderDetailsByName
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: *ref_1
      security: *ref_2
  /order/itemquantity{id}:
    put:
      operationId: OrderController_updateOrderQuantity
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrderDto'
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: *ref_1
      security: *ref_2
  /order/{menuItemid}:
    delete:
      operationId: OrderController_deleteMenuItem
      parameters:
        - name: menuItemid
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_1
      security: *ref_2
  /order/{Orderid}:
    delete:
      operationId: OrderController_deleteOrder
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_1
      security: *ref_2
  /order/{id}/addItem:
    put:
      operationId: OrderController_addMenuItem
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrderDto'
      responses:
        '200':
          description: >-
            Updates the quantity with given menuitem name and quantity to be
            placed
          content:
            application/json:
              examples:
                success:
                  description: updates the menuItem and returns menuitem
                  value:
                    success: true
                    data:
                      succes: true
                      data:
                        orderItem_id: 17
                        quantity: 31
                        menuitems:
                          menuitem_id: 4
                          menu_itemname: Pancakes
                          price: 10
                          tax: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: *ref_1
      security: *ref_2
  /order/{id}/updateStatus:
    patch:
      operationId: OrderController_updatePaymentStatus
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePaymentDTo'
      responses:
        '200':
          description: ''
      tags: *ref_1
      security: *ref_2
  /menu/{id}:
    get:
      operationId: Menucontroller_getMenuItemsById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Gives the order details by given id
          content:
            application/json:
              examples:
                success:
                  description: Gives the menu details
                  value:
                    succes: true
                    data:
                      menuitem_id: 2
                      menu_itemname: manchuria
                      price: 10
                      tax: 5
                      date:
                        createdDate: '2023-08-17T08:31:36.802Z'
                        updatedDate: '2023-08-24T04:40:27.390Z'
        '400':
          description: Occurs when given Id is invalid
          content:
            application/json:
              examples:
                InvalidId:
                  description: Occurs when given Id is invalid
                  value:
                    message: Given_id_is_not_found
      tags: &ref_3
        - Menu
  /menu:
    post:
      operationId: Menucontroller_createMenu
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuDto'
      responses:
        '201':
          description: ''
      tags: *ref_3
  /menu/{id}/menuitem:
    put:
      operationId: Menucontroller_addMenuItem
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDto'
      responses:
        '200':
          description: Creates a new Menuitem
          content:
            application/json:
              examples:
                success:
                  description: Creates a new Menu
                  value:
                    succes: true
                    data:
                      menu_itemname: Pancakes
                      price: 20
                      menus:
                        menu_id: 1
                        menu_name: lunch
                        date:
                          createdDate: '2023-08-17T08:58:58.467Z'
                          updatedDate: '2023-08-17T08:58:58.467Z'
                      menuitem_id: 17
                      tax: 5
                      date:
                        createdDate: '2023-08-25T11:20:06.064Z'
                        updatedDate: '2023-08-25T11:20:06.064Z'
        '400':
          description: Invalid id
          content:
            application/json:
              examples:
                MenuItemIdFound:
                  description: Occurs when Menuid is not found
                  value:
                    message: Given_id_is_not_found
      tags: *ref_3
  /employee/login:
    post:
      operationId: AuthController_employeeLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginEmployeeDto'
      responses:
        '200':
          description: Logins the user and returns a jwt token after verifying the user
          content:
            application/json:
              examples:
                succes:
                  description: Verify the employee and returns a Jwt token
                  value:
                    succes: true
                    jwtToken: sdjhvshvjdvnjdvnjvkjsvvhjvvjjjeiljejnebjq
        '400':
          description: Errors in given request body
          content:
            application/json:
              examples:
                MenuItemIdFound:
                  description: Occurs when given Id is invalid
                  value:
                    message: Given email is already registered give new email
      tags: &ref_4
        - EmployeeAuth
  /employee/register:
    post:
      operationId: AuthController_employeeRegister
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerEmployeeDto'
      responses:
        '200':
          description: Logins the user and returns a jwt token after verifying the user
          content:
            application/json:
              examples:
                succes:
                  description: Verify the employee and returns a Jwt token
                  value:
                    succes: true
                    jwtToken: sdjhvshvjdvnjdvnjvkjsvvhjvvjjjeiljejnebjq
        '400':
          description: Errors in given request body
          content:
            application/json:
              examples:
                MenuItemIdFound:
                  description: Occurs when given Id is invalid
                  value:
                    message: Given email is already registered give new email
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: *ref_4
  /employee/{id}/details:
    get:
      operationId: AuthController_getEmployeeDetails
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Gives the order details by given id
          content:
            application/json:
              examples:
                success:
                  description: Gives the menu details
                  value:
                    succes: true
                    data:
                      menuitem_id: 2
                      menu_itemname: manchuria
                      price: 10
                      tax: 5
                      date:
                        createdDate: '2023-08-17T08:31:36.802Z'
                        updatedDate: '2023-08-24T04:40:27.390Z'
        '400':
          description: Occurs when given Id is invalid
          content:
            application/json:
              examples:
                InvalidId:
                  description: Occurs when given Id is invalid
                  value:
                    message: Given_id_is_not_found
      tags: *ref_4
  /employee/roles:
    post:
      operationId: AuthController_createRoles
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRoleDto'
      responses:
        '200':
          description: creates a role
          content:
            application/json:
              examples:
                success:
                  description: Gives the role deatils that have been posted
                  value:
                    succes: true
                    data:
                      name: Customer
                      description: customer has permission to order
                      id: 5
        '400':
          description: Occurs when you are trying to post the same role again
          content:
            application/json:
              examples:
                conflict:
                  description: Same Role posted again
                  value:
                    error: Conflict Error
                    message: 'Given_role_is_already_present '
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
      tags: *ref_4
  /employee/role/{id}:
    put:
      operationId: AuthController_updateRoles
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRoleDto'
      responses:
        '200':
          description: Role is updated succefully
          content:
            application/json:
              examples:
                success:
                  description: Role is updated with given name in database
                  value:
                    succes: true
                    data:
                      id: 1
                      employee_Id: A1
                      employee_Name: prem
                      status: Active
                      email: prem3a3
                      phoneNumber: 8367
                      date:
                        createdDate: '2023-08-22T05:30:40.783Z'
                        updatedDate: '2023-08-22T09:38:24.000Z'
                      roles:
                        id: 1
                        name: Manager
        '400':
          description: Occurs when given path varaible is invalid
          content:
            application/json:
              examples:
                IdNotFound:
                  description: Role is updated with given name in database
                  value:
                    message: Id not found to update the role
      tags: *ref_4
info:
  title: chandu
  description: Your API Description
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    OrderItemDTo:
      type: object
      properties:
        menuItemId:
          type: number
          example: 1
        quantity:
          type: number
          example: 2
      required:
        - menuItemId
        - quantity
    createOrderDTo:
      type: object
      properties:
        customerName:
          type: string
          example: Sukesh
        items:
          example:
            - menuItemId: 3
              quantity: 1
            - menuItemId: 4
              quantity: 1
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDTo'
      required:
        - customerName
        - items
    updateOrderDto:
      type: object
      properties:
        menuItem:
          type: string
          example: Pancakes
        quantity:
          type: number
          example: 10
      required:
        - menuItem
        - quantity
    IsEnum:
      type: object
      properties: {}
    updatePaymentDTo:
      type: object
      properties:
        orderStatus:
          $ref: '#/components/schemas/IsEnum'
      required:
        - orderStatus
    MenuDto:
      type: object
      properties: {}
    MenuItemDto:
      type: object
      properties:
        menu_itemname:
          type: string
          example: Pancakes
        price:
          type: number
          example: 20
      required:
        - menu_itemname
        - price
    IsEmail:
      type: object
      properties: {}
    loginEmployeeDto:
      type: object
      properties:
        email:
          example: prem@gmail.com
          allOf:
            - $ref: '#/components/schemas/IsEmail'
        password:
          type: isStrongPassword
          example: prem@123
      required:
        - email
        - password
    registerEmployeeDto:
      type: object
      properties:
        employee_Id:
          type: string
          example: A23
        employee_Name:
          type: string
          example: A23
        status:
          type: string
          example: Active
        email:
          type: string
          example: prem3a3@gmail.com
        password:
          type: string
          example: Prem@12345678
        role:
          type: string
          example: Manager
      required:
        - employee_Id
        - employee_Name
        - status
        - email
        - password
        - role
    createRoleDto:
      type: object
      properties:
        description:
          type: string
          example: Have permissions to change an employee
      required:
        - description
    updateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Manager
        description:
          type: string
          example: Have permissions to change an employee
      required:
        - name
        - description
